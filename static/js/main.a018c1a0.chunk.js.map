{"version":3,"sources":["paper/utils.js","paper/index.js","paper/tools/select.js","paper/PaperTools/index.js","App.js","serviceWorker.js","index.js"],"names":["restBindings","bind","paper","project","activeLayer","getItems","forEach","item","data","type","push","getItemsByName","name","match","indexOf","updateItem","values","position","x","y","newPosition","Point","tweenTo","content","excludedValues","Object","keys","filter","key","includes","undefined","addLine","path","Path","strokeColor","strokeWidth","length","start","moveTo","lineTo","add","selected","addCircle","Circle","fillColor","closed","addRect","Rectangle","addText","props","point","text","PointText","justification","onClick","save","json","exportJSON","localStorage","setItem","load","getItem","importJSON","Paper","memo","ref","useRef","actionQueue","useEffect","queue","current","setup","containers","document","querySelectorAll","container","createElement","className","body","appendChild","addTool","title","comand","button","textContent","onclick","url","sourceKey","destKey","console","log","initTools","tools","find","tool","Tool","segment","hitOptions","segments","stroke","fill","tolerance","onMouseDown","event","hitResult","hitTest","modifiers","shift","remove","location","insert","index","smooth","addChild","onMouseMove","onMouseDrag","delta","addToolSelect","prevLayer","gridConfig","color","width","view","viewSize","height","drawLine","locked","Layer","lines","i","a","b","line","drawGridVerticalLines","drawGridHorizontalLines","activate","addGrid","onFrame","action","payload","itemName","processAction","onAction","splice","setInterval","Array","map","Color","random","fetch","then","response","clearInterval","resize","PaperTools","App","isLocalhost","Boolean","window","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","ready","unregister","reload","checkValidServiceWorker","alert","getRegistration","update"],"mappings":"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","file":"static/js/main.a018c1a0.chunk.js","sourcesContent":["import paper from 'paper';\n\nexport const defaultFillColor = 'rgba(0,0,0,0.87)';\nexport const defaultStrokeColor = 'rgba(0,0,0,0.87)';\n\nexport let restBindings = [];\n\nexport const initCanvas = (canvas) => {\n    paper.setup(canvas);\n};\n\nexport const initTools = () => {\n\n    let containers = document.querySelectorAll(\".tools\");\n\n    const container = document.createElement(\"div\");\n    container.className = `tools tools-${containers.length}`;\n    document.body.appendChild(container);\n\n    const addTool = ({ title, comand }) => {\n\n        const button = document.createElement(\"button\");\n        button.className = 'tool-button';\n        button.textContent = title;\n        button.type = 'button';\n        button.onclick = comand;\n\n        container.appendChild(button);\n    }\n\n    addTool({ title: \"Add Line\", comand: addLine })\n    addTool({ title: \"Add Circle\", comand: addCircle });\n    addTool({ title: \"Add Rect\", comand: addRect });\n    addTool({ title: \"Add Text\", comand: addText });\n    addTool({ title: \"Save\", comand: save });\n    addTool({ title: \"Load\", comand: load });\n\n    addTool({\n        title: \"Bind\",\n        comand: () => {\n\n            const itemName = 'text0';\n\n            paper.project.getItems({\n                name: itemName\n            }).forEach(item => {\n                // bindItem(item, {\n                //     type: 'rest',\n                //     url: 'https://jsonplaceholder.typicode.com/todos/1',\n                //     sourceKey: 'title',\n                //     destKey: 'content'\n                // })\n\n                item.data = {\n                    ...item.data,\n                    type: 'rest',\n                    url: 'https://jsonplaceholder.typicode.com/todos/1',\n                    sourceKey: 'title',\n                    destKey: 'content'\n                }\n                console.log(\"item binded\");\n                bind();\n            });\n        }\n    });\n};\n\nexport const bind = () => {\n\n    restBindings = [];\n\n    paper.project.activeLayer.getItems()\n        .forEach(item => {\n\n            if(item.data.type === 'rest') {\n                restBindings.push({\n                    ...item.data\n                })\n            }\n        })\n};\n\nexport const onAction = (action) => {\n    console.log(\"on Action:\", action);\n\n    const { item, itemName, values } = action.payload;\n\n    const processAction = (item) => {\n        if (action.type === \"update\") {\n            updateItem(item, values);\n        }\n    };\n\n    if (itemName) {\n        paper.project.getItems({\n            name: itemName\n        }).forEach(item => {\n            processAction(item);\n        });\n    }\n\n    if (item) {\n        processAction(item);\n    }\n};\n\nexport const useTool = (name) => {\n    const tool = paper.tools.find(tool => tool.name === name)\n    tool.activate()\n}\n\nexport const getItemsByName = (name) => {\n    return paper.project.getItems({\n        match: (item) => (item.name || \"\").indexOf(name) === 0\n    });\n};\n\nexport const updateItem = function (item, values) {\n\n    if (values.position && item.position) {\n\n        const x = values.position.x || item.position.x;\n        const y = values.position.y || item.position.y;\n        const newPosition = new paper.Point(x, y);\n\n        item.tweenTo(\n            { 'position': newPosition },\n            300\n        );\n    }\n\n    if (values.content && item.content) {\n        item.content = values.content;\n    }\n\n    const excludedValues = [\"position\", \"content\"];\n\n    Object.keys(values)\n        .filter(key => !excludedValues.includes(key))\n        .forEach(key => {\n\n            if (item[key] !== undefined) {\n                item.tweenTo(\n                    { [key]: values[key] },\n                    300\n                );\n            }\n        });\n\n    return item;\n};\n\nexport const addLine = () => {\n\n    const name = \"line\";\n    const path = new paper.Path();\n    path.strokeColor = defaultStrokeColor;\n    path.strokeWidth = 2;\n    path.name = name + getItemsByName(name).length;\n\n    const start = new paper.Point(100, 100);\n    path.moveTo(start);\n    path.lineTo(start.add([200, -50]));\n\n    paper.project.activeLayer.selected = false;\n    path.selected = true;\n};\n\nexport const addCircle = () => {\n\n    const name = \"circle\";\n    const path = new paper.Path.Circle(new paper.Point(100, 100), 50);\n\n    path.fillColor = defaultFillColor;\n    path.strokeColor = defaultStrokeColor;\n    path.strokeWidth = 2;\n    path.closed = true;\n    path.name = name + getItemsByName(name).length;\n\n    paper.project.activeLayer.selected = false;\n    path.selected = true;\n};\n\nexport const addRect = () => {\n\n    const name = \"rect\";\n    const path = new paper.Path.Rectangle(0, 0, 100, 100);\n\n    path.fillColor = defaultFillColor;\n    path.strokeColor = defaultStrokeColor;\n    path.strokeWidth = 2;\n    path.closed = true;\n    path.name = name + getItemsByName(name).length;\n\n    paper.project.activeLayer.selected = false;\n    path.selected = true;\n};\n\nexport const addText = (props) => {\n\n    const name = \"text\";\n    const point = props.point || new paper.Point(100, 100);\n    const content = props.content || \"Text\";\n\n    const text = new paper.PointText(point);\n    text.justification = 'center';\n    text.fillColor = 'black';\n    text.strokeWidth = 2;\n    text.content = content;\n    text.name = name + getItemsByName(name).length;\n\n    text.onClick = props.onClick;\n\n    return text;\n};\n\nexport const addGrid = () => {\n\n    var prevLayer = paper.project.activeLayer;\n\n    const gridConfig = {\n        color: 'rgba(0,0,0,0.11)',\n        width: paper.view.viewSize.width,\n        height: paper.view.viewSize.height\n    };\n\n    const drawLine = (segments) => {\n\n        const path = new paper.Path(segments);\n        path.strokeColor = 'rgba(0,0,0,0.21)';\n        path.strokeWidth = 1;\n        path.locked = true;\n\n        return path;\n    };\n\n    const drawGridVerticalLines = ({\n        color,\n        width,\n        height\n    }) => {\n\n        let lines = [];\n\n        for (var i = 0; i < width; i++) {\n\n            if (i % 10 === 0) {\n                var a = new paper.Point(i, 0);\n                var b = new paper.Point(i, height);\n                var segments = [a, b];\n                var line = drawLine(segments);\n\n                line.strokeColor = color;\n                line.strokeWidth = i % 50 === 0 ? 2 : 1;\n\n                lines.push(line);\n            }\n        }\n\n        return lines;\n    }\n\n    const drawGridHorizontalLines = ({\n        color,\n        width,\n        height\n    }) => {\n\n        let lines = [];\n\n        for (var i = 0; i < height; i++) {\n\n            if (i % 10 === 0) {\n\n                var a = new paper.Point(0, i);\n                var b = new paper.Point(width, i);\n                var segments = [a, b];\n                var line = drawLine(segments);\n\n                line.strokeColor = color;\n                line.strokeWidth = i % 50 === 0 ? 2 : 1;\n\n                lines.push(line);\n            }\n        }\n\n        return lines;\n    }\n\n    var gridLayer = new paper.Layer();\n    gridLayer.name = \"grid-layer\";\n\n    drawGridVerticalLines(gridConfig);\n    drawGridHorizontalLines(gridConfig);\n\n    prevLayer.activate();\n};\n\nexport const save = () => {\n    const json = paper.project.activeLayer.exportJSON();\n    localStorage.setItem('project', json);\n};\n\nexport const load = () => {\n    const json = localStorage.getItem('project');\n    if (json) {\n        // paper.project.clear();\n        paper.project.activeLayer.importJSON(json)\n    }\n};","import React, { useEffect, memo, useRef } from 'react';\nimport paper from 'paper';\nimport { initTools, addGrid, load, bind, onAction } from './utils';\nimport { addToolSelect } from './tools/select';\n\nconst Paper = memo(() => {\n\n    const ref = useRef();\n    const actionQueue = useRef([]);\n\n    useEffect(() => {\n\n        const queue = actionQueue.current;\n\n        paper.setup(ref.current);\n        initTools();\n\n        addToolSelect();\n        addGrid();\n\n        load();\n        bind();\n\n        paper.view.onFrame = (event) => {\n            if (queue.length > 0) {\n\n                const action = queue[queue.length - 1];\n                onAction(action);\n    \n                const index = queue.indexOf(action);\n                if (index > -1) {\n                    queue.splice(index, 1);\n                }\n            }\n        }\n\n        // TODO REMOVE\n        var a = setInterval(() => {\n\n            new Array(10)\n                .fill(null)\n                .map((action, index) => ({\n                    type: \"update\",\n                    payload: {\n                        itemName: \"rect\" + index,\n                        values: {\n                            fillColor: paper.Color.random()\n                        }\n                    }\n                }))\n                .forEach(action => {\n                    queue.push(action);\n                });\n    \n        }, 1000);\n    \n        var b = setInterval(() => {\n    \n            fetch('https://jsonplaceholder.typicode.com/todos/1')\n                .then(response => response.json())\n                .then(json => {\n    \n                    const action = {\n                        type: \"update\",\n                        payload: {\n                            itemName: \"text\" + 1,\n                            values: {\n                                content: json.title\n                            }\n                        }\n                    }\n    \n                    queue.push(action);\n                })\n    \n        }, 5000);\n    \n        return () => {\n            clearInterval(a);\n            clearInterval(b);\n        }\n    }, []);\n\n    return (\n        <canvas ref={ref} resize=\"resize\"></canvas>\n    );\n});\n\nexport default Paper;\n","import paper from 'paper';\n\nexport const addToolSelect = () => {\n\n    const name = \"toolSelect\";\n\n    if(paper.tools.find(tool => tool.name === name)) {\n        return;\n    }\n\n    var tool = new paper.Tool();\n    tool.name = name;\n\n    var hitOptions = {\n        segments: true,\n        stroke: true,\n        fill: true,\n        tolerance: 5\n    };\n\n    var segment, path;\n    var movePath = false;\n\n    tool.onMouseDown = function (event) {\n\n        segment = path = null;\n        var hitResult = paper.project.hitTest(event.point, hitOptions);\n\n        if (!hitResult)\n            return;\n\n        if (event.modifiers.shift) {\n            if (hitResult.type === 'segment') {\n                hitResult.segment.remove();\n            };\n            return;\n        }\n\n        if (hitResult) {\n\n            path = hitResult.item;\n\n            if (hitResult.type === 'segment') {\n                segment = hitResult.segment;\n            }\n            else if (hitResult.type === 'stroke') {\n                var location = hitResult.location;\n                segment = path.insert(location.index + 1, event.point);\n                path.smooth();\n            }\n        }\n\n        movePath = hitResult.type === 'fill';\n\n        if (movePath) {\n            paper.project.activeLayer.addChild(hitResult.item);\n        }\n    };\n\n    tool.onMouseMove = (event) => {\n\n        if (event.item) {\n\n            if (event.item.name === 'button') {\n                return;\n            }\n\n            paper.project.activeLayer.selected = false;\n            event.item.selected = true;\n        }\n    };\n\n    tool.onMouseDrag = (event) => {\n\n\n        if (segment) {\n            segment.point = segment.point.add(event.delta);\n            // path.smooth();\n        } else if (path) {\n            if (path.selected) {\n                path.position = path.position.add(event.delta);\n            }\n        }\n    };\n}\n","import React, { memo } from 'react';\nimport paper from 'paper';\nimport { addLine, addCircle, addRect, addText, save, load, bind } from '../utils';\n\nconst PaperTools = memo(() => {\n\n    const tools = [\n        { title: \"Add Line\", comand: addLine },\n        { title: \"Add Circle\", comand: addCircle },\n        { title: \"Add Rect\", comand: addRect },\n        { title: \"Add Text\", comand: addText },\n        { title: \"Save\", comand: save },\n        { title: \"Load\", comand: load },\n        {\n            title: \"Bind\",\n            comand: () => {\n\n                const itemName = 'text0';\n\n                paper.project.getItems({\n                    name: itemName\n                }).forEach(item => {\n                    // bindItem(item, {\n                    //     type: 'rest',\n                    //     url: 'https://jsonplaceholder.typicode.com/todos/1',\n                    //     sourceKey: 'title',\n                    //     destKey: 'content'\n                    // })\n\n                    item.data = {\n                        ...item.data,\n                        type: 'rest',\n                        url: 'https://jsonplaceholder.typicode.com/todos/1',\n                        sourceKey: 'title',\n                        destKey: 'content'\n                    }\n                    console.log(\"item binded\");\n                    bind();\n                });\n            }\n        }\n    ];\n\n    return (\n        <div className={`tools tools-0`}>\n            {tools.map((tool, index) =>\n                <button\n                    key={index}\n                    className=\"tool-button\"\n                    onClick={tool.onClick}>\n                    {tool.title}\n                </button>\n            )}\n        </div>\n    );\n});\n\nexport default PaperTools;\n","import React from 'react';\nimport Paper from './paper';\nimport PaperTools from './paper/PaperTools';\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <>\n      <Paper />\n      <PaperTools />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\n// const serviceWorkerRefresh = () => {\n//     serviceWorker.unregister();\n//     serviceWorker.register({\n//         onUpdate: () => alert(\"New content is available and will be used when all tabs for this page are closed.\"),\n//         onSuccess: () => () => {\n//             alert(\"Content is cached for offline use.\");\n\n//         }\n//     });\n// }\n\n// setInterval(() => {\n//     console.log('registering serviceWorker');\n//     serviceWorkerRefresh();\n// }, 5000);\n\n\n// serviceWorker.unregister();\n\nserviceWorker.register({\n    onUpdate: () => alert(\"New content is available and will be used when all tabs for this page are closed.\"),\n    onSuccess: () => () => {\n        alert(\"Content is cached for offline use.\");\n\n    }\n});\n\nsetInterval(() => {\n\n    navigator.serviceWorker.getRegistration()\n        .then(registration => {\n            registration.update();\n\n        });\n\n}, 3000);\n"],"sourceRoot":""}